{
  "address": "0xf9EEa41dFF8897c3498feb7F1783Dc1182921daa",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getAddressFromIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getIndexFromAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "registerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_addressIndex",
          "type": "uint256"
        }
      ],
      "name": "sendMessageToAddress",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9c6afa390397b5e0a2184cb082eaf0e38f359584a578c18a4b3dde5bc37babcb",
  "receipt": {
    "to": null,
    "from": "0xeEFCf30e96E44f98600b2D93f02fA70cf062465b",
    "contractAddress": "0xf9EEa41dFF8897c3498feb7F1783Dc1182921daa",
    "transactionIndex": 2,
    "gasUsed": "431137",
    "logsBloom": "0x
    "blockHash": "0xaa24d075e57bfaab7f8a3e58e05c9a4f943e496348c3f5665e6aaa91140e8e89",
    "transactionHash": "0x9c6afa390397b5e0a2184cb082eaf0e38f359584a578c18a4b3dde5bc37babcb",
    "logs": [],
    "blockNumber": 133869872,
    "cumulativeGasUsed": "2027963",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8de42b8953e5adaae602bf8c66576bd5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAddressFromIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIndexFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_addressIndex\",\"type\":\"uint256\"}],\"name\":\"sendMessageToAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"kind\":\"dev\",\"methods\":{\"sendMessageToAddress(string,uint256)\":{\"params\":{\"_addressIndex\":\"(uint256) - the index of the address to which the message will be sent\",\"_message\":\"(string memory) - new message to send\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sendMessageToAddress(string,uint256)\":{\"notice\":\"Function that allows anyone to send a message to an address\"},\"withdraw()\":{\"notice\":\"Function that allows the owner to withdraw all the Ether in the contract The function can only be called by the owner of the contract as defined by the isOwner modifier\"}},\"notice\":\"A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArbAddressTableExample.sol\":\"ArbAddressTableExample\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@arbitrum/nitro-contracts/src/precompiles/ArbAddressTable.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/OffchainLabs/nitro-contracts/blob/main/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Allows registering / retrieving addresses at uint indices, saving calldata.\\n * @notice Precompiled contract that exists in every Arbitrum chain at 0x0000000000000000000000000000000000000066.\\n */\\ninterface ArbAddressTable {\\n    /**\\n     * @notice Check whether an address exists in the address table\\n     * @param addr address to check for presence in table\\n     * @return true if address is in table\\n     */\\n    function addressExists(\\n        address addr\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice compress an address and return the result\\n     * @param addr address to compress\\n     * @return compressed address bytes\\n     */\\n    function compress(\\n        address addr\\n    ) external returns (bytes memory);\\n\\n    /**\\n     * @notice read a compressed address from a bytes buffer\\n     * @param buf bytes buffer containing an address\\n     * @param offset offset of target address\\n     * @return resulting address and updated offset into the buffer (revert if buffer is too short)\\n     */\\n    function decompress(\\n        bytes calldata buf,\\n        uint256 offset\\n    ) external view returns (address, uint256);\\n\\n    /**\\n     * @param addr address to lookup\\n     * @return index of an address in the address table (revert if address isn't in the table)\\n     */\\n    function lookup(\\n        address addr\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @param index index to lookup address\\n     * @return address at a given index in address table (revert if index is beyond end of table)\\n     */\\n    function lookupIndex(\\n        uint256 index\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Register an address in the address table\\n     * @param addr address to register\\n     * @return index of the address (existing index, or newly created index if not already registered)\\n     */\\n    function register(\\n        address addr\\n    ) external returns (uint256);\\n\\n    /**\\n     * @return size of address table (= first unused index)\\n     */\\n    function size() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xff8107ab0f9f261014ea246c9cfb24599c24aa4357ddb5e5c886e5f6a1bd039e\",\"license\":\"BUSL-1.1\"},\"contracts/ArbAddressTableExample.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Arbitrum precompile contract for address table\\nimport \\\"@arbitrum/nitro-contracts/src/precompiles/ArbAddressTable.sol\\\";\\n\\n/**\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\n * It also allows the owner to withdraw the Ether in the contract\\n * @author BuidlGuidl\\n */\\ncontract ArbAddressTableExample {\\n    // State Variables\\n    mapping(address => uint) public userBalances;\\n    ArbAddressTable arbAddressTable;\\n\\n    // Events: a way to emit log statements from smart contract that can be listened to by external parties\\n    event MessageSent(address indexed sender, address indexed recipient, string message, uint256 value);\\n\\n    // Constructor: Called once on contract deployment\\n    // Check packages/hardhat/deploy/00_deploy_your_contract.ts\\n    constructor() {\\n        // connect to precompiled address table contract\\n        arbAddressTable = ArbAddressTable(address(102));\\n    }\\n\\n    // Modifier: used to define a set of rules that must be met before or after a function is executed\\n    // Check the withdraw() function\\n    modifier isAddress(uint256 addressIndex) {\\n        // retrieve address from address table\\n        address addressFromTable = arbAddressTable.lookupIndex(addressIndex);\\n        // msg.sender: predefined variable that represents address of the account that called the current function\\n        require(msg.sender == addressFromTable, \\\"Not the authorized address\\\");\\n        _;\\n    }\\n\\n    function registerAddress(address _address) public returns (uint256) {\\n        return arbAddressTable.register(_address);\\n    }\\n\\n    function getAddressFromIndex(uint256 _index) public view returns (address) {\\n        return arbAddressTable.lookupIndex(_index);\\n    }\\n\\n    function getIndexFromAddress(address _address) public view returns (uint256) {\\n        return arbAddressTable.lookup(_address);\\n    }\\n\\n    /**\\n     * Function that allows anyone to send a message to an address\\n     *\\n     * @param _message (string memory) - new message to send\\n     * @param _addressIndex (uint256) - the index of the address to which the message will be sent\\n     */\\n    function sendMessageToAddress(string memory _message, uint256 _addressIndex) public payable {\\n        // Print data to the hardhat chain console. Remove when deploying to a live network.\\n        address _recipient = arbAddressTable.lookupIndex(_addressIndex);\\n\\n        // msg.value: built-in global variable that represents the amount of ether sent with the transaction\\n        if (msg.value > 0) {\\n            // Add value to the recipients balance\\n            userBalances[_recipient] += msg.value;\\n        } \\n\\n        // emit: keyword used to trigger an event\\n        emit MessageSent(msg.sender, _recipient, _message, msg.value);\\n    }\\n\\n    /**\\n     * Function that allows the owner to withdraw all the Ether in the contract\\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\\n     */\\n    function withdraw() public {\\n        uint256 usersBalance = userBalances[msg.sender];\\n        require(usersBalance > 0, \\\"No balance to withdraw\\\");\\n        userBalances[msg.sender] = 0;\\n        (bool success, ) = msg.sender.call{ value: userBalances[msg.sender] }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5c6e9690fad54e4a0b067bb117383480574e51b2eb4abbf49250f0634ebbf1cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b031916606617905561066c806100336000396000f3fe6080604052600436106100595760003560e01c806305abc26e146100655780630a7263b01461007a57806326224c64146100b7578063384539c5146100f25780633ccfd60b14610112578063a8a540081461012757600080fd5b3661006057005b600080fd5b610078610073366004610480565b610147565b005b34801561008657600080fd5b5061009a610095366004610535565b61023d565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100c357600080fd5b506100e46100d2366004610566565b60006020819052908152604090205481565b6040519081526020016100ae565b3480156100fe57600080fd5b506100e461010d366004610566565b6102b1565b34801561011e57600080fd5b50610078610320565b34801561013357600080fd5b506100e4610142366004610566565b61041d565b6001546040516311430cf160e31b8152600481018390526000916001600160a01b031690638a18678890602401602060405180830381865afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b5919061058a565b905034156101eb576001600160a01b038116600090815260208190526040812080543492906101e59084906105a7565b90915550505b806001600160a01b0316336001600160a01b03167f7e49d574e0305424aa957cb3f69b25f92aa58d53fdee73f05e40019210a70bce85346040516102309291906105c8565b60405180910390a3505050565b6001546040516311430cf160e31b8152600481018390526000916001600160a01b031690638a18678890602401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab919061058a565b92915050565b600154604051636a5b5aed60e11b81526001600160a01b038381166004830152600092169063d4b6b5da90602401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab919061061d565b336000908152602081905260409020548061037b5760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b60448201526064015b60405180910390fd5b336000818152602081905260408082208290555190919082908181818181875af1925050503d80600081146103cc576040519150601f19603f3d011682016040523d82523d6000602084013e6103d1565b606091505b50509050806104195760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610372565b5050565b600154604051632210724360e11b81526001600160a01b0383811660048301526000921690634420e486906024016020604051808303816000875af11580156102fc573d6000803e3d6000fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561049357600080fd5b823567ffffffffffffffff808211156104ab57600080fd5b818501915085601f8301126104bf57600080fd5b8135818111156104d1576104d161046a565b604051601f8201601f19908116603f011681019083821181831017156104f9576104f961046a565b8160405282815288602084870101111561051257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b60006020828403121561054757600080fd5b5035919050565b6001600160a01b038116811461056357600080fd5b50565b60006020828403121561057857600080fd5b81356105838161054e565b9392505050565b60006020828403121561059c57600080fd5b81516105838161054e565b808201808211156102ab57634e487b7160e01b600052601160045260246000fd5b604081526000835180604084015260005b818110156105f657602081870181015160608684010152016105d9565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b60006020828403121561062f57600080fd5b505191905056fea2646970667358221220b54792d3304c2979b23c963018860301d6cdcaee919c8ebe85dd58bec48995e264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c806305abc26e146100655780630a7263b01461007a57806326224c64146100b7578063384539c5146100f25780633ccfd60b14610112578063a8a540081461012757600080fd5b3661006057005b600080fd5b610078610073366004610480565b610147565b005b34801561008657600080fd5b5061009a610095366004610535565b61023d565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100c357600080fd5b506100e46100d2366004610566565b60006020819052908152604090205481565b6040519081526020016100ae565b3480156100fe57600080fd5b506100e461010d366004610566565b6102b1565b34801561011e57600080fd5b50610078610320565b34801561013357600080fd5b506100e4610142366004610566565b61041d565b6001546040516311430cf160e31b8152600481018390526000916001600160a01b031690638a18678890602401602060405180830381865afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b5919061058a565b905034156101eb576001600160a01b038116600090815260208190526040812080543492906101e59084906105a7565b90915550505b806001600160a01b0316336001600160a01b03167f7e49d574e0305424aa957cb3f69b25f92aa58d53fdee73f05e40019210a70bce85346040516102309291906105c8565b60405180910390a3505050565b6001546040516311430cf160e31b8152600481018390526000916001600160a01b031690638a18678890602401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab919061058a565b92915050565b600154604051636a5b5aed60e11b81526001600160a01b038381166004830152600092169063d4b6b5da90602401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab919061061d565b336000908152602081905260409020548061037b5760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b60448201526064015b60405180910390fd5b336000818152602081905260408082208290555190919082908181818181875af1925050503d80600081146103cc576040519150601f19603f3d011682016040523d82523d6000602084013e6103d1565b606091505b50509050806104195760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610372565b5050565b600154604051632210724360e11b81526001600160a01b0383811660048301526000921690634420e486906024016020604051808303816000875af11580156102fc573d6000803e3d6000fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561049357600080fd5b823567ffffffffffffffff808211156104ab57600080fd5b818501915085601f8301126104bf57600080fd5b8135818111156104d1576104d161046a565b604051601f8201601f19908116603f011681019083821181831017156104f9576104f961046a565b8160405282815288602084870101111561051257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b60006020828403121561054757600080fd5b5035919050565b6001600160a01b038116811461056357600080fd5b50565b60006020828403121561057857600080fd5b81356105838161054e565b9392505050565b60006020828403121561059c57600080fd5b81516105838161054e565b808201808211156102ab57634e487b7160e01b600052601160045260246000fd5b604081526000835180604084015260005b818110156105f657602081870181015160608684010152016105d9565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b60006020828403121561062f57600080fd5b505191905056fea2646970667358221220b54792d3304c2979b23c963018860301d6cdcaee919c8ebe85dd58bec48995e264736f6c63430008140033",
  "devdoc": {
    "author": "BuidlGuidl",
    "kind": "dev",
    "methods": {
      "sendMessageToAddress(string,uint256)": {
        "params": {
          "_addressIndex": "(uint256) - the index of the address to which the message will be sent",
          "_message": "(string memory) - new message to send"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "sendMessageToAddress(string,uint256)": {
        "notice": "Function that allows anyone to send a message to an address"
      },
      "withdraw()": {
        "notice": "Function that allows the owner to withdraw all the Ether in the contract The function can only be called by the owner of the contract as defined by the isOwner modifier"
      }
    },
    "notice": "A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 69,
        "contract": "contracts/ArbAddressTableExample.sol:ArbAddressTableExample",
        "label": "userBalances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/ArbAddressTableExample.sol:ArbAddressTableExample",
        "label": "arbAddressTable",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ArbAddressTable)61"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ArbAddressTable)61": {
        "encoding": "inplace",
        "label": "contract ArbAddressTable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}